import gmpy2
from Crypto.Util.number import long_to_bytes


def is_perfect_nth_root(number, exp):
    if number < 0:
        # Negative numbers cannot have even roots
        return False

    # Compute the integer nth root
    root, exact = gmpy2.iroot(gmpy2.mpz(number), exp)
    return root, exact  # True if it's a perfect nth root, False otherwise


n = 97127064200566540941928678594867636803398339677296908159077174895749191256799557351118036403508090866875498452714025619485895754802360340694285870549792955221439057386006929730315481568817059312364553914087684084487261722012727425926234514741860807367636771201908481073590517580414773610725772307291721042623

ct = 48245654321634701455895626304137847336996478297713840323661725059931579994616044368900079069592410947349116320004205830982263945363378614707701788128068692459565222022474760276489584283877823711904548049874221945723734099832204867825444694649757841525189302154560568102716182029919362349113976190626358050904


e = 5
found = False
i = 0
while not found:
    for i in range(10**7):
        if i % 100000 == 0:
            print(f"e: {e}, i: {i}")
        pt, exact = is_perfect_nth_root(ct + n * i, e)
        if exact:
            try:
                print(f"Flag found: {long_to_bytes(pt).decode()}")
                found = True
            except UnicodeDecodeError:
                continue
    e += 2
